clearvars;clc;[train_data, train_label, validation_data, validation_label, test_data, test_label] = preprocess();save('dataset.mat', 'train_data', 'train_label', 'validation_data', 'validation_label', 'test_data', 'test_label');load('dataset.mat');n_class = 10;T = zeros(size(train_label, 1), n_class);for i = 1 : n_class    T(:, i) = (train_label == i);end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Logistic Regression with Gradient Descent*******************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%options = optimset('MaxIter', 200);W = zeros(size(train_data, 2) + 1, n_class);initialWeights = zeros(size(train_data, 2) + 1, 1);for i = 1 : n_class    objFunction = @(params) blrObjFunction(params, train_data, T(:, i));    [w, ~] = fmincg(objFunction, initialWeights, options);    W(:, i) = w;endW_blr = W;predicted_label = blrPredict(W_blr, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = blrPredict(W_blr, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = blrPredict(W_blr, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Logistic Regression with Newton-Raphson method**************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% (extra credits)% (un-comment this block of code to run)W = zeros(size(train_data, 2) + 1, n_class);initialWeights = zeros(size(train_data, 2) + 1, 1);n_iter = 5;for i = 1 : n_class    W(:, i) = blrNewtonRaphsonLearn(initialWeights, train_data, T(:, i), n_iter);endW_blr_Newton = W;predicted_label = blrPredict(W_blr_Newton, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = blrPredict(W_blr_Newton, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = blrPredict(W_blr_Newton, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Multiclass Logistic Regression with Gradient Descent *******%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% (extra credits)% (un-comment this block of code to run)options = optimset('MaxIter', 200);initialWeights = zeros((size(train_data, 2) + 1) * n_class, 1);objFunction = @(params) mlrObjFunction(params, train_data, T);[W, cost] = fmincg(objFunction, initialWeights, options);W = reshape(W, size(train_data, 2) + 1, n_class);    W_mlr = W;predicted_label = mlrPredict(W_mlr, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = mlrPredict(W_mlr, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = mlrPredict(W_mlr, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Multiclass Logistic Regression with Newton-Raphson method **%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% (extra credits)% (un-comment this block of code to run)initialWeights = zeros((size(train_data, 2) + 1) * n_class, 1);n_iter = 5;[W] = mlrNewtonRaphsonLearn(initialWeights, train_data, T, n_iter);W_mlr_Newton = W;predicted_label = mlrPredict(W_mlr_Newton, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = mlrPredict(W_mlr_Newton, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = mlrPredict(W_mlr_Newton, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Support Vector Machine**************************************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   YOUR CODE HERE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%S = load('newdataset_SVM.mat');train_data = S.train_data;train_label = S.train_label;validation_data = S.validation_data;validation_label = S.validation_label;test_data = S.test_data;test_label = S.test_label;model_linear = svmtrain(train_label,train_data,'-t 0');[predicted_label,predicted_accuracy,extra] = svmpredict(train_label,train_data,model_linear);fprintf('training accuracy = %f \n',predicted_accuracy);[predicted_label,predicted_accuracy,extra] = svmpredict(validation_label,validation_data,model_linear);fprintf('val accuracy = %f \n',predicted_accuracy);[predicted_label,predicted_accuracy,extra] = svmpredict(test_label,test_data,model_linear);fprintf('test accuracy = %f \n',predicted_accuracy);model_rbf_1 = svmtrain(train_label,train_data,'-t 2 -g 1');[predicted_label,predicted_accuracy,extra] = svmpredict(train_label,train_data,model_rbf_1);fprintf('training accuracy = %f \n',predicted_accuracy);[predicted_label,predicted_accuracy,extra] = svmpredict(validation_label,validation_data,model_rbf_1);fprintf('val accuracy = %f \n',predicted_accuracy);[predicted_label,predicted_accuracy,extra] = svmpredict(test_label,test_data,model_rbf_1);fprintf('test accuracy = %f \n',predicted_accuracy);model_rbf_default = svmtrain(train_label,train_data,'-t 2');[predicted_label,predicted_accuracy,extra] = svmpredict(train_label,train_data,model_rbf_default);fprintf('training accuracy = %f \n',predicted_accuracy);[predicted_label,predicted_accuracy,extra] = svmpredict(validation_label,validation_data,model_rbf_default);fprintf('val accuracy = %f \n',predicted_accuracy);[predicted_label,predicted_accuracy,extra] = svmpredict(test_label,test_data,model_rbf_default);fprintf('test accuracy = %f \n',predicted_accuracy);model_rbf_C = svmtrain(train_label,train_data,'-t 2 -c 1');[predicted_label,predicted_accuracy,extra] = svmpredict(train_label,train_data,model_rbf_C);fprintf('training accuracy = %f \n',predicted_accuracy);[predicted_label,predicted_accuracy,extra] = svmpredict(validation_label,validation_data,model_rbf_C);fprintf('val accuracy = %f \n',predicted_accuracy);prev_accuracy = predicted_accuracy(1,1);predicted_C = 1;[predicted_label,predicted_accuracy,extra] = svmpredict(test_label,test_data,model_rbf_C);fprintf('test accuracy = %f \n',predicted_accuracy);for i = 10:10:100    params = sprintf('-t 2 -c %d',i);    model = svmtrain(train_label,train_data,params);    [predicted_label,predicted_accuracy,extra] = svmpredict(train_label,train_data,model);    fprintf('training accuracy = %f \n',predicted_accuracy);    [predicted_label,predicted_accuracy,extra] = svmpredict(validation_label,validation_data,model);    fprintf('val accuracy = %f \n',predicted_accuracy);    if prev_accuracy < predicted_accuracy(1,1)        model_rbf_C = model;        predicted_C = i;        prev_accuracy = predicted_accuracy(1,1);    end    [predicted_label,predicted_accuracy,extra] = svmpredict(test_label,test_data,model);    fprintf('test accuracy = %f , predicted C = %f \n',predicted_accuracy, predicted_C);endsave('params.mat', 'W_blr', 'W_blr_Newton','W_mlr','W_mlr_Newton', 'model_linear', 'model_rbf_1', 'model_rbf_default', 'model_rbf_C');